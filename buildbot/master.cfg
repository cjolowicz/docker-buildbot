import os
import socket
import urllib.parse

from buildbot.plugins import (
    changes,
    schedulers,
    steps,
    util,
    worker,
)


def get_docker_host():
    DOCKER_HOST = os.environ.get("DOCKER_HOST")

    if DOCKER_HOST is not None:
        try:
            result = urllib.parse.urlparse(DOCKER_HOST)
            if result.netloc is not None:
                return result.netloc.split(":")[0]
        except ValueError:
            pass


def get_buildbot_url():
    hostname = get_docker_host() or "localhost"
    return f"http://{hostname}:8010/"


worker = worker.DockerLatentWorker(
    "worker",
    "pass",
    docker_host="unix://var/run/docker.sock",
    image="cjolowicz/buildbot-worker-example:1.8.0",
    masterFQDN=socket.gethostname(),
    hostconfig={
        "network_mode": f"container:{socket.gethostname()}",
    },
)

factory = util.BuildFactory([
    steps.Git(repourl="git://github.com/buildbot/hello-world.git", mode="incremental"),
    steps.ShellCommand(command=["trial", "hello"], env={"PYTHONPATH": "."}),
])

builder = util.BuilderConfig(
    name="hello-world",
    workernames=["worker"],
    factory=factory,
)

scheduler = schedulers.ForceScheduler(
    name="trigger",
    builderNames=["hello-world"]
)

BuildmasterConfig = {
    "workers": [worker],
    "protocols": {"pb": {"port": 9989}},
    "schedulers": [scheduler],
    "builders": [builder],
    "title": "Hello World CI",
    "titleURL": "https://buildbot.github.io/hello-world/",
    "buildbotURL": get_buildbot_url(),
    "www": {
        "port": 8010,
        "plugins": {
            "waterfall_view": {},
            "console_view": {},
            "grid_view": {},
        },
        "logfileName": None,  # do not use a separate logfile
    },
    "db": {"db_url": "sqlite:///state.sqlite"},
}
